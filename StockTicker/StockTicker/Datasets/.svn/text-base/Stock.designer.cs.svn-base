#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5420
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StockTicker.Datasets
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="CCSC")]
	public partial class StockDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStockData(StockData instance);
    partial void UpdateStockData(StockData instance);
    partial void DeleteStockData(StockData instance);
    #endregion
		
		public StockDataContext() : 
				base(global::StockTicker.Properties.Settings.Default.CCSCConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public StockDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StockDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StockDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StockDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<StockData> StockDatas
		{
			get
			{
				return this.GetTable<StockData>();
			}
		}
	}
	
	[Table(Name="dbo.StockData")]
	public partial class StockData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Symbol;
		
		private System.DateTime _Day;
		
		private decimal _Price_Open;
		
		private decimal _Price_High;
		
		private decimal _Price_Low;
		
		private decimal _Price_Close;
		
		private long _Volume;
		
		private decimal _Unknown_Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSymbolChanging(string value);
    partial void OnSymbolChanged();
    partial void OnDayChanging(System.DateTime value);
    partial void OnDayChanged();
    partial void OnPrice_OpenChanging(decimal value);
    partial void OnPrice_OpenChanged();
    partial void OnPrice_HighChanging(decimal value);
    partial void OnPrice_HighChanged();
    partial void OnPrice_LowChanging(decimal value);
    partial void OnPrice_LowChanged();
    partial void OnPrice_CloseChanging(decimal value);
    partial void OnPrice_CloseChanged();
    partial void OnVolumeChanging(long value);
    partial void OnVolumeChanged();
    partial void OnUnknown_ValueChanging(decimal value);
    partial void OnUnknown_ValueChanged();
    #endregion
		
		public StockData()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Symbol", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Symbol
		{
			get
			{
				return this._Symbol;
			}
			set
			{
				if ((this._Symbol != value))
				{
					this.OnSymbolChanging(value);
					this.SendPropertyChanging();
					this._Symbol = value;
					this.SendPropertyChanged("Symbol");
					this.OnSymbolChanged();
				}
			}
		}
		
		[Column(Storage="_Day", DbType="DateTime NOT NULL")]
		public System.DateTime Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[Column(Storage="_Price_Open", DbType="Money NOT NULL")]
		public decimal Price_Open
		{
			get
			{
				return this._Price_Open;
			}
			set
			{
				if ((this._Price_Open != value))
				{
					this.OnPrice_OpenChanging(value);
					this.SendPropertyChanging();
					this._Price_Open = value;
					this.SendPropertyChanged("Price_Open");
					this.OnPrice_OpenChanged();
				}
			}
		}
		
		[Column(Storage="_Price_High", DbType="Money NOT NULL")]
		public decimal Price_High
		{
			get
			{
				return this._Price_High;
			}
			set
			{
				if ((this._Price_High != value))
				{
					this.OnPrice_HighChanging(value);
					this.SendPropertyChanging();
					this._Price_High = value;
					this.SendPropertyChanged("Price_High");
					this.OnPrice_HighChanged();
				}
			}
		}
		
		[Column(Storage="_Price_Low", DbType="Money NOT NULL")]
		public decimal Price_Low
		{
			get
			{
				return this._Price_Low;
			}
			set
			{
				if ((this._Price_Low != value))
				{
					this.OnPrice_LowChanging(value);
					this.SendPropertyChanging();
					this._Price_Low = value;
					this.SendPropertyChanged("Price_Low");
					this.OnPrice_LowChanged();
				}
			}
		}
		
		[Column(Storage="_Price_Close", DbType="Money NOT NULL")]
		public decimal Price_Close
		{
			get
			{
				return this._Price_Close;
			}
			set
			{
				if ((this._Price_Close != value))
				{
					this.OnPrice_CloseChanging(value);
					this.SendPropertyChanging();
					this._Price_Close = value;
					this.SendPropertyChanged("Price_Close");
					this.OnPrice_CloseChanged();
				}
			}
		}
		
		[Column(Storage="_Volume", DbType="BigInt NOT NULL")]
		public long Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[Column(Storage="_Unknown_Value", DbType="Money NOT NULL")]
		public decimal Unknown_Value
		{
			get
			{
				return this._Unknown_Value;
			}
			set
			{
				if ((this._Unknown_Value != value))
				{
					this.OnUnknown_ValueChanging(value);
					this.SendPropertyChanging();
					this._Unknown_Value = value;
					this.SendPropertyChanged("Unknown_Value");
					this.OnUnknown_ValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
